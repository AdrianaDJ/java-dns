/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.dns.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import java.util.List;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;

@Generated("by GAPIC")
@BetaApi
/**
 * An operation represents a successful mutation performed on a Cloud DNS resource. Operations
 * provide: - An audit log of server resource mutations. - A way to recover/retry API calls in the
 * case where the response is never received by the caller. Use the caller specified
 * client_operation_id.
 */
public final class Operation implements ApiMessage {
  private final OperationDnsKeyContext dnsKeyContext;
  private final String id;
  private final String kind;
  private final String startTime;
  private final String status;
  private final String type;
  private final String user;
  private final OperationManagedZoneContext zoneContext;

  private Operation() {
    this.dnsKeyContext = null;
    this.id = null;
    this.kind = null;
    this.startTime = null;
    this.status = null;
    this.type = null;
    this.user = null;
    this.zoneContext = null;
  }

  private Operation(
      OperationDnsKeyContext dnsKeyContext,
      String id,
      String kind,
      String startTime,
      String status,
      String type,
      String user,
      OperationManagedZoneContext zoneContext) {
    this.dnsKeyContext = dnsKeyContext;
    this.id = id;
    this.kind = kind;
    this.startTime = startTime;
    this.status = status;
    this.type = type;
    this.user = user;
    this.zoneContext = zoneContext;
  }

  @Override
  public Object getFieldValue(String fieldName) {
    if ("dnsKeyContext".equals(fieldName)) {
      return dnsKeyContext;
    }
    if ("id".equals(fieldName)) {
      return id;
    }
    if ("kind".equals(fieldName)) {
      return kind;
    }
    if ("startTime".equals(fieldName)) {
      return startTime;
    }
    if ("status".equals(fieldName)) {
      return status;
    }
    if ("type".equals(fieldName)) {
      return type;
    }
    if ("user".equals(fieldName)) {
      return user;
    }
    if ("zoneContext".equals(fieldName)) {
      return zoneContext;
    }
    return null;
  }

  @Nullable
  @Override
  public ApiMessage getApiMessageRequestBody() {
    return null;
  }

  @Nullable
  @Override
  /**
   * The fields that should be serialized (even if they have empty values). If the containing
   * message object has a non-null fieldmask, then all the fields in the field mask (and only those
   * fields in the field mask) will be serialized. If the containing object does not have a
   * fieldmask, then only non-empty fields will be serialized.
   */
  public List<String> getFieldMask() {
    return null;
  }

  /** Only populated if the operation targeted a DnsKey (output only). */
  public OperationDnsKeyContext getDnsKeyContext() {
    return dnsKeyContext;
  }

  /**
   * Unique identifier for the resource. This is the client_operation_id if the client specified it
   * when the mutation was initiated, otherwise, it is generated by the server. The name must be
   * 1-63 characters long and match the regular expression [-a-z0-9]? (output only)
   */
  public String getId() {
    return id;
  }

  /** Identifies what kind of resource this is. Value: the fixed string "dns#operation". */
  public String getKind() {
    return kind;
  }

  /**
   * The time that this operation was started by the server. This is in RFC3339 text format (output
   * only).
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only). A
   * status of "DONE" means that the request to update the authoritative servers has been sent, but
   * the servers might not be updated yet.
   */
  public String getStatus() {
    return status;
  }

  /** Type of the operation. Operations include insert, update, and delete (output only). */
  public String getType() {
    return type;
  }

  /**
   * User who requested the operation, for example: user{@literal @}example.com. cloud-dns-system
   * for operations automatically done by the system. (output only)
   */
  public String getUser() {
    return user;
  }

  /** Only populated if the operation targeted a ManagedZone (output only). */
  public OperationManagedZoneContext getZoneContext() {
    return zoneContext;
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(Operation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  public static Operation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final Operation DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new Operation();
  }

  public static class Builder {
    private OperationDnsKeyContext dnsKeyContext;
    private String id;
    private String kind;
    private String startTime;
    private String status;
    private String type;
    private String user;
    private OperationManagedZoneContext zoneContext;

    Builder() {}

    public Builder mergeFrom(Operation other) {
      if (other == Operation.getDefaultInstance()) return this;
      if (other.getDnsKeyContext() != null) {
        this.dnsKeyContext = other.dnsKeyContext;
      }
      if (other.getId() != null) {
        this.id = other.id;
      }
      if (other.getKind() != null) {
        this.kind = other.kind;
      }
      if (other.getStartTime() != null) {
        this.startTime = other.startTime;
      }
      if (other.getStatus() != null) {
        this.status = other.status;
      }
      if (other.getType() != null) {
        this.type = other.type;
      }
      if (other.getUser() != null) {
        this.user = other.user;
      }
      if (other.getZoneContext() != null) {
        this.zoneContext = other.zoneContext;
      }
      return this;
    }

    Builder(Operation source) {
      this.dnsKeyContext = source.dnsKeyContext;
      this.id = source.id;
      this.kind = source.kind;
      this.startTime = source.startTime;
      this.status = source.status;
      this.type = source.type;
      this.user = source.user;
      this.zoneContext = source.zoneContext;
    }

    /** Only populated if the operation targeted a DnsKey (output only). */
    public OperationDnsKeyContext getDnsKeyContext() {
      return dnsKeyContext;
    }

    /** Only populated if the operation targeted a DnsKey (output only). */
    public Builder setDnsKeyContext(OperationDnsKeyContext dnsKeyContext) {
      this.dnsKeyContext = dnsKeyContext;
      return this;
    }

    /**
     * Unique identifier for the resource. This is the client_operation_id if the client specified
     * it when the mutation was initiated, otherwise, it is generated by the server. The name must
     * be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)
     */
    public String getId() {
      return id;
    }

    /**
     * Unique identifier for the resource. This is the client_operation_id if the client specified
     * it when the mutation was initiated, otherwise, it is generated by the server. The name must
     * be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)
     */
    public Builder setId(String id) {
      this.id = id;
      return this;
    }

    /** Identifies what kind of resource this is. Value: the fixed string "dns#operation". */
    public String getKind() {
      return kind;
    }

    /** Identifies what kind of resource this is. Value: the fixed string "dns#operation". */
    public Builder setKind(String kind) {
      this.kind = kind;
      return this;
    }

    /**
     * The time that this operation was started by the server. This is in RFC3339 text format
     * (output only).
     */
    public String getStartTime() {
      return startTime;
    }

    /**
     * The time that this operation was started by the server. This is in RFC3339 text format
     * (output only).
     */
    public Builder setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    /**
     * Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only). A
     * status of "DONE" means that the request to update the authoritative servers has been sent,
     * but the servers might not be updated yet.
     */
    public String getStatus() {
      return status;
    }

    /**
     * Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only). A
     * status of "DONE" means that the request to update the authoritative servers has been sent,
     * but the servers might not be updated yet.
     */
    public Builder setStatus(String status) {
      this.status = status;
      return this;
    }

    /** Type of the operation. Operations include insert, update, and delete (output only). */
    public String getType() {
      return type;
    }

    /** Type of the operation. Operations include insert, update, and delete (output only). */
    public Builder setType(String type) {
      this.type = type;
      return this;
    }

    /**
     * User who requested the operation, for example: user{@literal @}example.com. cloud-dns-system
     * for operations automatically done by the system. (output only)
     */
    public String getUser() {
      return user;
    }

    /**
     * User who requested the operation, for example: user{@literal @}example.com. cloud-dns-system
     * for operations automatically done by the system. (output only)
     */
    public Builder setUser(String user) {
      this.user = user;
      return this;
    }

    /** Only populated if the operation targeted a ManagedZone (output only). */
    public OperationManagedZoneContext getZoneContext() {
      return zoneContext;
    }

    /** Only populated if the operation targeted a ManagedZone (output only). */
    public Builder setZoneContext(OperationManagedZoneContext zoneContext) {
      this.zoneContext = zoneContext;
      return this;
    }

    public Operation build() {

      return new Operation(dnsKeyContext, id, kind, startTime, status, type, user, zoneContext);
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setDnsKeyContext(this.dnsKeyContext);
      newBuilder.setId(this.id);
      newBuilder.setKind(this.kind);
      newBuilder.setStartTime(this.startTime);
      newBuilder.setStatus(this.status);
      newBuilder.setType(this.type);
      newBuilder.setUser(this.user);
      newBuilder.setZoneContext(this.zoneContext);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "Operation{"
        + "dnsKeyContext="
        + dnsKeyContext
        + ", "
        + "id="
        + id
        + ", "
        + "kind="
        + kind
        + ", "
        + "startTime="
        + startTime
        + ", "
        + "status="
        + status
        + ", "
        + "type="
        + type
        + ", "
        + "user="
        + user
        + ", "
        + "zoneContext="
        + zoneContext
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Operation) {
      Operation that = (Operation) o;
      return Objects.equals(this.dnsKeyContext, that.getDnsKeyContext())
          && Objects.equals(this.id, that.getId())
          && Objects.equals(this.kind, that.getKind())
          && Objects.equals(this.startTime, that.getStartTime())
          && Objects.equals(this.status, that.getStatus())
          && Objects.equals(this.type, that.getType())
          && Objects.equals(this.user, that.getUser())
          && Objects.equals(this.zoneContext, that.getZoneContext());
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsKeyContext, id, kind, startTime, status, type, user, zoneContext);
  }
}
